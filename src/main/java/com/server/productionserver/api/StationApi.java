/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.server.productionserver.api;

import com.server.productionserver.model.CurlDirection;
import com.server.productionserver.model.Station;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-11-09T17:21:33.341303800+08:00[Asia/Shanghai]")

@Validated
@Api(value = "station", description = "the station API")
public interface StationApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /reqDelJob : 根据id删除岗位信息
     *
     * @return 成功 (status code 200)
     *      or 找不到记录 (status code 404)
     */
    @ApiOperation(value = "根据id删除岗位信息", nickname = "stationIdDelete", notes = "", response = Object.class, tags={ "岗位表", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "成功", response = Object.class),
            @ApiResponse(code = 404, message = "找不到记录", response = Object.class)})
    @RequestMapping(value = "/reqDelJob",
            produces = { "application/json" },
            consumes = { "multipart/form-data" },
            method = RequestMethod.DELETE)
    default ResponseEntity<Object> stationIdDelete(@ApiParam(value = "", required=true) @RequestParam(value="id", required=true)  String stationId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /reqGetJob : 根据id获取岗位信息
     *
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "根据id获取岗位信息", nickname = "stationIdGet", notes = "", response = Object.class, tags={ "岗位表", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "成功", response = Object.class) })
    @RequestMapping(value = "/reqGetJob",
            produces = { "application/json" },
            consumes = { "multipart/form-data" },
            method = RequestMethod.POST)
    default ResponseEntity<Object> stationIdGet(@ApiParam(value = "", required=true) @RequestParam(value="id", required=true)  String stationId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /reqSetJob : 修改岗位信息
     *
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "根据id修改岗位信息", nickname = "stationPut", notes = "", response = Object.class, tags={ "岗位表", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "成功", response = Object.class),
            @ApiResponse(code = 404, message = "记录不存在", response = Object.class)})
    @RequestMapping(value = "/reqSetJob",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    default ResponseEntity<Object> stationPut(@ApiParam(value = "", required=true) @RequestBody Station station) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /reqGetAllJob : 查询全部岗位
     *
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "查询全部岗位", nickname = "stationGet", notes = "", response = Object.class, tags={ "岗位表", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "成功", response = Object.class) })
    @RequestMapping(value = "/reqGetAllJob",
            produces = { "application/json" },
            method = RequestMethod.GET)
    default ResponseEntity<Object> boxGet() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /reqAddJob: 插入岗位信息
     *
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "插入岗位信息", nickname = "stationPost", notes = "", response = Object.class, tags={ "岗位表", })
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "成功", response = Object.class),
            @ApiResponse(code = 403, message = "禁止访问", response = Object.class)
    })
    @RequestMapping(value = "/reqAddJob",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    default ResponseEntity<Object> stationPost(@ApiParam(value = "", required=true) @RequestBody Station station) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
