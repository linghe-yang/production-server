/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.server.productionserver.api;
import com.server.productionserver.model.*;
import io.swagger.annotations.*;
import com.server.productionserver.DAO.ProjectDAO;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.List;
import java.util.Optional;



@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-10-20T16:45:17.792097900+08:00[Asia/Shanghai]")

@Validated
@Api(value = "project", description = "the project API")
public interface ProjectApi{

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /reqGetAllProject : 查询全部项目
     *
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "查询全部项目", nickname = "projectGet", notes = "", response = Object.class, tags={ "项目表", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "成功", response = Object.class) })
    @RequestMapping(value = "/reqGetAllProject",
            produces = { "application/json" },
            method = RequestMethod.GET)
    default ResponseEntity<List<Project>> projectGet() {
        return new ResponseEntity<>(HttpStatus.OK);

    }



    /**
     * POST /reqAddProject : 插入项目信息
     *
     * @return 成功 (status code 201)
     */
    @ApiOperation(value = "插入项目信息", nickname = "projectPost", notes = "", response = Object.class, tags={ "项目表", })
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "成功", response = Object.class),
            @ApiResponse(code = 403, message = "禁止访问", response = Object.class)})
    @RequestMapping(value = "/reqAddProject",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    default ResponseEntity<Object> projectPost(@ApiParam(value = "", required=true) @RequestBody Project project) {
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * DELETE /reqDelProject : 根据id删除项目信息
     *
     * @param projectId  (required)
     * @return 成功 (status code 200)
     *         or 记录不存在 (status code 404)
     */
    @ApiOperation(value = "根据id删除项目信息", nickname = "projectIdDelete", notes = "", response = Object.class, tags={ "项目表", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "成功", response = Object.class),
            @ApiResponse(code = 404, message = "记录不存在", response = Object.class) })

    @RequestMapping(value = "/reqDelProject",
            produces = { "application/json" },
            consumes = { "multipart/form-data" },
            method = RequestMethod.DELETE)

    default ResponseEntity<Object> projectIdDelete(@ApiParam(value = "", required=true) @RequestParam(value="id", required=true)  String projectId) {
        return new ResponseEntity<>(HttpStatus.OK);
    }


    /**
     * POST /reqGetProject : 根据id获取项目信息
     *
     * @param projectId  (required)
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "根据id获取项目信息", nickname = "projectIdGet", notes = "", response = Object.class, tags={ "项目表", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "成功", response = Object.class) })
    @RequestMapping(value = "/reqGetProject",
            produces = { "application/json" },
            consumes = { "multipart/form-data" },
            method = RequestMethod.POST)
    default ResponseEntity<Object> projectIdGet(@ApiParam(value = "", required=true) @RequestParam(value="id", required=true)  String projectId) {
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * PUT /reqSetProject : 根据id修改项目信息
     *
     * @return 成功 (status code 200)
     *         or 记录不存在 (status code 404)
     */
    @ApiOperation(value = "根据id修改项目信息", nickname = "projectPut", notes = "", response = Object.class, tags={ "项目表", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "成功", response = Object.class),
            @ApiResponse(code = 404, message = "记录不存在", response = Object.class) })
    @RequestMapping(value = "/reqSetProject",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    default ResponseEntity<Object> projectPut(@ApiParam(value = "", required=true) @RequestBody Project project) {
        return new ResponseEntity<>(HttpStatus.OK);

    }

    /**
     * PUT /reqFinishProject : 根据id完后项目
     *
     * @return 成功 (status code 200)
     *         or 记录不存在 (status code 404)
     */
    @ApiOperation(value = "根据id修改项目信息", nickname = "projectPut", notes = "", response = Object.class, tags={ "项目表", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "成功", response = Object.class),
            @ApiResponse(code = 404, message = "记录不存在", response = Object.class) })
    @RequestMapping(value = "/reqFinishProject",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    default ResponseEntity<Object> projectFinnishPut(@ApiParam(value = "", required=true) @RequestBody Project project) {
        return new ResponseEntity<>(HttpStatus.OK);

    }
}
