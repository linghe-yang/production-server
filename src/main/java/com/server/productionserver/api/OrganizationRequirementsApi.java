/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.server.productionserver.api;

import com.server.productionserver.model.OrganizationRequirements;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-11-06T17:21:33.341303800+08:00[Asia/Shanghai]")

@Validated
@Api(value = "organization_requirements", description = "the organization_requirements API")
public interface OrganizationRequirementsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /reqGetAllCustOrderReq : 获取整理要求信息
     *
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "获取整理要求信息", nickname = "organizationRequirementsGet", notes = "", response = Object.class, tags={ "整理要求表", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "成功", response = Object.class) })
    @RequestMapping(value = "/reqGetAllCustOrderReq",
            produces = { "application/json" },
            method = RequestMethod.GET)
    default ResponseEntity<Object> organizationRequirementsGet() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /reqAddCustOrderReq : 新建整理要求信息
     *
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "新建整理要求信息", nickname = "organizationRequirementsPost", notes = "", response = Object.class, tags={ "整理要求表", })
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "成功", response = Object.class) })
    @RequestMapping(value = "/reqAddCustOrderReq",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    default ResponseEntity<Object> organizationRequirementsPost(@ApiParam(value = "", required=true) @RequestBody OrganizationRequirements orgreq) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /reqDelCustOrderReq : 根据id删除整理要求信息
     *
     * @param cusId  (required)
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "根据id删除整理要求信息", nickname = "organizationRequirementscusIdDelete", notes = "", response = Object.class, tags={ "整理要求表", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "成功", response = Object.class) })
    @RequestMapping(value = "/reqDelCustOrderReq",
            produces = { "application/json" },
            consumes = { "multipart/form-data" },
            method = RequestMethod.DELETE)
    default ResponseEntity<Object> organizationRequirementscusIdDelete(@ApiParam(value = "",required=true) @RequestParam("id") String cusId, @ApiParam(value = "",required=true) @RequestParam("num") String num) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /reqGetCustOrderReq : 根据id获取整理要求信息
     *
     * @param cusId  (required)
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "根据id获取整理要求信息", nickname = "organizationRequirementscusIdGet", notes = "", response = Object.class, tags={ "整理要求表", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "成功", response = Object.class) })
    @RequestMapping(value = "/reqGetCustOrderReq",
            produces = { "application/json" },
            consumes = { "multipart/form-data" },
            method = RequestMethod.POST)
    default ResponseEntity<Object> organizationRequirementscusIdGet(@ApiParam(value = "",required=true) @RequestParam("id") String cusId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /reqSetCustOrderReq : 修改整理要求信息
     *
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "修改整理要求信息", nickname = "organizationRequirementsPut", notes = "", response = Object.class, tags={ "整理要求表", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "成功", response = Object.class) })
    @RequestMapping(value = "/reqSetCustOrderReq",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    default ResponseEntity<Object> organizationRequirementsPut(@ApiParam(value = "", required=true) @RequestBody OrganizationRequirements orgreq) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
